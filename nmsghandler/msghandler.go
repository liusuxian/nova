/*
 * @Author: liusuxian 382185882@qq.com
 * @Date: 2023-03-31 14:01:01
 * @LastEditors: liusuxian 382185882@qq.com
 * @LastEditTime: 2023-04-03 21:29:58
 * @FilePath: /playlet-server/Users/liusuxian/Desktop/project-code/golang-project/nova/nmsghandler/msghandler.go
 * @Description:
 *
 * Copyright (c) 2023 by ${git_name_email}, All Rights Reserved.
 */
package nmsghandler

import (
	"bytes"
	"github.com/liusuxian/nova/niface"
	"github.com/liusuxian/nova/ninterceptor"
	"github.com/liusuxian/nova/nlog"
	"github.com/olekukonko/tablewriter"
	"github.com/panjf2000/ants/v2"
	"reflect"
	"runtime"
	"strconv"
	"strings"
)

// MsgHandle 消息处理回调结构
type MsgHandle struct {
	apis           map[uint16]niface.IRouter // 存放每个 MsgID 所对应的处理方法
	workerPool     *ants.Pool                // Worker 工作池
	workerPoolSize int                       // Worker 池的最大 Worker 数量
	builder        niface.IBuilder           // 责任链构造器
}

// NewMsgHandle 创建消息处理
func NewMsgHandle(workerPoolSize int) (handler *MsgHandle) {
	handler = &MsgHandle{
		apis:           make(map[uint16]niface.IRouter),
		workerPoolSize: workerPoolSize,
		builder:        ninterceptor.NewBuilder(),
	}
	handler.builder.Tail(handler)
	return
}

// AddRouter 为消息添加具体的处理逻辑
func (mh *MsgHandle) AddRouter(msgID uint16, router niface.IRouter) {
	// 判断当前 msgID 绑定的 API 处理方法是否已经存在
	if _, ok := mh.apis[msgID]; ok {
		nlog.Fatal("AddRouter Repeated Api", nlog.Uint16("MsgID", msgID))
	}
	// 添加 msgID 与 API 的绑定关系
	mh.apis[msgID] = router
}

// PrintRouters 打印所有路由
func (mh *MsgHandle) PrintRouters() {
	routerNum := len(mh.apis)
	if routerNum == 0 {
		return
	}
	// 组装打印数据
	printData := make([][]string, 0, routerNum)
	for msgID, router := range mh.apis {
		rowData := make([]string, 0, 3)
		// msgID
		rowData = append(rowData, strconv.FormatInt(int64(msgID), 10))
		// 获取 Router 的类型信息
		t := reflect.TypeOf(router)
		// Router
		rowData = append(rowData, t.Elem().String())
		// handler
		handlerData := make([]string, 0, t.NumMethod())
		for i := t.NumMethod() - 1; i >= 0; i-- {
			funcPtr := t.Method(i).Func.Pointer()
			funcInfo := runtime.FuncForPC(funcPtr)
			file, _ := funcInfo.FileLine(funcPtr)
			if file != "<autogenerated>" {
				handlerData = append(handlerData, funcInfo.Name())
			}
		}
		rowData = append(rowData, strings.Join(handlerData, "\n"))
		printData = append(printData, rowData)
	}
	// 打印数据
	tableData := &bytes.Buffer{}
	table := tablewriter.NewWriter(tableData)
	table.SetHeader([]string{"MSGID", "ROUTER", "HANDLER"})
	for _, v := range printData {
		table.Append(v)
		table.SetAlignment(tablewriter.ALIGN_LEFT)
		table.SetRowLine(true)
	}
	table.Render()
	nlog.Write(tableData.Bytes(), nlog.LOGTYPE_ERROR)
}

// StartWorkerPool 启动 Worker 工作池
func (mh *MsgHandle) StartWorkerPool() {
	if mh.workerPool == nil && mh.workerPoolSize > 0 {
		workerPool, err := ants.NewPool(mh.workerPoolSize)
		if err != nil {
			nlog.Fatal("StartWorkerPool Fatal", nlog.Err(err))
		}
		mh.workerPool = workerPool
		nlog.Info("StartWorkerPool Succeed", nlog.Int("WorkerPoolSize", mh.workerPoolSize))
	}
}

// StopWorkerPool 停止 Worker 工作池
func (mh *MsgHandle) StopWorkerPool() {
	if mh.workerPool != nil {
		mh.workerPool.Release()
		nlog.Info("StopWorkerPool Succeed")
	}
}

// AddInterceptor 添加拦截器
func (mh *MsgHandle) AddInterceptor(interceptor niface.IInterceptor) {
	if mh.builder != nil {
		mh.builder.AddInterceptor(interceptor)
	}
}

// Execute 执行当前请求
func (mh *MsgHandle) Execute(request niface.IRequest) {
	mh.builder.Execute(request)
}

// Intercept 拦截
func (mh *MsgHandle) Intercept(chain niface.IChain) (resp niface.IcResp) {
	request := chain.Request()
	if request != nil {
		switch iRequest := request.(type) {
		case niface.IRequest:
			if mh.workerPool != nil {
				mh.workerPool.Submit(func() {
					mh.handlerRequest(iRequest)
				})
			} else {
				go mh.handlerRequest(iRequest)
			}
		}
	}
	return chain.Proceed(chain.Request())
}

// handlerRequest 处理请求
func (mh *MsgHandle) handlerRequest(request niface.IRequest) {
	handler, ok := mh.apis[request.GetMsgID()]
	if !ok {
		nlog.Error("HandlerMsg Api Not Found", nlog.Uint16("MsgID", request.GetMsgID()))
		return
	}
	// Request 请求绑定 Router
	request.BindRouter(handler)
	// 执行对应处理方法
	request.Call()
}
